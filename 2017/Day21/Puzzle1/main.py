def CheckPattern(pattern, input):
    if len(pattern) != len(input):
        return False

    for x in range(len(pattern)):
        for y in range(len(pattern[x])):
            if pattern[x][y] != input[x][y]:
                return False

    return True

def Rotate(input):
    output = [[0 for i in input] for j in input]
    for i in range(len(input)):
        for j in range(len(input)):
            output[i][j] = input[len(input) - j - 1][i]

    return output

def Flip(input):
    output = []
    for row in input:
        rrow = list(row)
        rrow.reverse()
        output.append(rrow)

    return output

def ExpandPattern(patterns, input):
    for pattern in patterns:
        for i in range(4):
            input = Rotate(input)
            flipped = Flip(input)

            if CheckPattern(pattern["in"], input) or CheckPattern(pattern["in"], flipped):
                return pattern["out"]

def PrintGrid(grid):
    for row in grid:
        s = ""
        for column in row:
            s += str(column)
        print(s)

def solve(input):
    lines = input.splitlines()

    patterns = []

    for line in lines:
        inout = line.split(" => ")

        inRows = inout[0].split('/')
        outRows = inout[1].split('/')

        inPattern = []
        for row in inRows:
            inPattern.append([])
            for c in row:
                inPattern[-1].append(c)

        outPattern = []
        for row in outRows:
            outPattern.append([])
            for c in row:
                outPattern[-1].append(c)

        patterns.append({ 'in': inPattern, 'out': outPattern })

    grid = [ [ '.', '#', '.' ], [ '.', '.', '#' ], [ '#', '#', '#' ] ]

    for i in range(18):
        print(i)
        divider = 0
        newSize = 0
        if len(grid) % 2 == 0:
            divider = 2
            newSize = len(grid) // 2 * 3
        else:
            divider = 3
            newSize = len(grid) // 3 * 4

        newGrid = [[0 for j in range(newSize)] for k in range(newSize)]
        
        for x in range(len(grid) // divider):
            for y in range(len(grid[x]) // divider):
                subGrid = [[0 for m in range(divider)] for n in range(divider)]
                for a in range(divider):
                    for b in range(divider):
                        subGrid[a][b] = grid[x * divider + a][y * divider + b]

                subGrid = ExpandPattern(patterns, subGrid)
                #PrintGrid(subGrid)

                for a in range(len(subGrid)):
                    for b in range(len(subGrid[a])):
                        newGrid[x * (divider + 1) + a][y * (divider + 1) + b] = subGrid[a][b]

        grid = newGrid

    #PrintGrid(grid)
    result = 0
    for row in grid:
        for column in row:
            if column == '#':
                result += 1

    print(result)




solve("""../.. => #../##./...
#./.. => ..#/.#./..#
##/.. => ##./.#./##.
.#/#. => ..#/.##/...
##/#. => #.#/.../..#
##/## => .#./###/...
.../.../... => ##../#.../..../..#.
#../.../... => ...#/.##./##.#/...#
.#./.../... => ..##/###./..#./.#..
##./.../... => ####/###./#..#/#...
#.#/.../... => #.#./###./..##/##..
###/.../... => ..##/####/.##./..##
.#./#../... => .###/#.#./####/#..#
##./#../... => #.#./##../###./#..#
..#/#../... => #..#/##../..#./##.#
#.#/#../... => .##./.##./.###/..#.
.##/#../... => ##.#/.###/..../.##.
###/#../... => #.##/..../#..#/###.
.../.#./... => #.##/##.#/.#../##..
#../.#./... => ##../..#./.#.#/.###
.#./.#./... => ###./#.../.#../#..#
##./.#./... => .##./.###/..../.#.#
#.#/.#./... => .###/.###/#.##/.#..
###/.#./... => #.../..../##.#/##.#
.#./##./... => #..#/...#/#.#./#..#
##./##./... => #.../.#../.#.#/#...
..#/##./... => ..##/..##/.#../#..#
#.#/##./... => ###./#.../#.../.#.#
.##/##./... => ##.#/.###/####/..##
###/##./... => ...#/###./.#../..#.
.../#.#/... => #.../#..#/.###/.#.#
#../#.#/... => #.../..../##.#/#...
.#./#.#/... => .##./.##./.#.#/##.#
##./#.#/... => #.##/###./##../#.#.
#.#/#.#/... => ..../####/#.##/..#.
###/#.#/... => #.../##.#/..../.#.#
.../###/... => ..##/..../###./#..#
#../###/... => ..#./..../..../..##
.#./###/... => .##./..../####/..#.
##./###/... => ####/.#.#/..#./#.##
#.#/###/... => .#.#/.###/###./.#.#
###/###/... => .#.#/.#../#.#./..#.
..#/.../#.. => .#../...#/##../#.##
#.#/.../#.. => .#../##../.#../.###
.##/.../#.. => ###./.##./.###/.#.#
###/.../#.. => ...#/.##./.###/##..
.##/#../#.. => .#../.###/#.../..##
###/#../#.. => #.#./#..#/#.#./..##
..#/.#./#.. => .#../#.../.##./#..#
#.#/.#./#.. => ...#/#.../...#/#...
.##/.#./#.. => #.##/..#./##.#/##.#
###/.#./#.. => ..../..#./.###/.##.
.##/##./#.. => ..#./#.#./.#.#/....
###/##./#.. => ####/###./...#/..#.
#../..#/#.. => ####/.#../#..#/.###
.#./..#/#.. => ##../##.#/..#./....
##./..#/#.. => #.#./#..#/.#.#/####
#.#/..#/#.. => ##.#/..##/.#../####
.##/..#/#.. => ..../..#./#.#./#.##
###/..#/#.. => ..##/###./#..#/.##.
#../#.#/#.. => .#.#/##../#.../...#
.#./#.#/#.. => #.../###./..#./.#.#
##./#.#/#.. => #.##/#.#./..#./..##
..#/#.#/#.. => ...#/.#.#/##.#/#...
#.#/#.#/#.. => .#.#/...#/#.##/##.#
.##/#.#/#.. => .#../##.#/#.#./.#..
###/#.#/#.. => .#../###./.###/###.
#../.##/#.. => .###/.###/##../....
.#./.##/#.. => ..../#.##/#.##/###.
##./.##/#.. => .#../..#./.#.#/.#..
#.#/.##/#.. => .#../#..#/##.#/....
.##/.##/#.. => #.../#..#/###./#.#.
###/.##/#.. => #.../..##/..##/...#
#../###/#.. => #.#./###./...#/#..#
.#./###/#.. => .###/#..#/.#../...#
##./###/#.. => ..../#.../#.#./###.
..#/###/#.. => .#.#/#.##/#.#./....
#.#/###/#.. => ..../###./##../..##
.##/###/#.. => ..##/#.##/..../....
###/###/#.. => ..##/##../#.#./#.##
.#./#.#/.#. => #.#./.#.#/####/.##.
##./#.#/.#. => #.../..../#..#/#..#
#.#/#.#/.#. => ##../##../.##./#..#
###/#.#/.#. => ##.#/###./.#../#.#.
.#./###/.#. => #..#/#.../.#../####
##./###/.#. => #.#./..##/####/###.
#.#/###/.#. => #.#./###./...#/#.##
###/###/.#. => ..##/..##/####/####
#.#/..#/##. => .#.#/...#/##../..##
###/..#/##. => .##./###./#.##/###.
.##/#.#/##. => #.##/.#../##.#/..##
###/#.#/##. => ...#/####/.###/#.#.
#.#/.##/##. => #.#./####/.#.#/....
###/.##/##. => ###./.#../.#../....
.##/###/##. => #.../.#../####/....
###/###/##. => .#.#/.#../.#.#/#.##
#.#/.../#.# => ...#/#.##/#.##/####
###/.../#.# => #.#./#..#/..../..#.
###/#../#.# => #..#/#.#./##.#/..#.
#.#/.#./#.# => ..#./##.#/..../....
###/.#./#.# => #.##/.#../.#.#/###.
###/##./#.# => .###/..../##.#/...#
#.#/#.#/#.# => #.../.#../#.../##.#
###/#.#/#.# => ..##/##.#/#..#/.#.#
#.#/###/#.# => ..##/##../..##/....
###/###/#.# => #..#/#.#./#.##/#..#
###/#.#/### => ..#./###./.#../#...
###/###/### => ..../..../####/###.""")